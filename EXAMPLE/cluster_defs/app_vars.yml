---

use_local_artifact: true

playbook_ca_yaml: "{{playbook_dir}}/cluster_defs/ssl_ca.yml"

osearch_version: "2.0.1"      #"1.3.3"
osearch_artifact_location: "https://artifacts.opensearch.org/releases/bundle/opensearch/{{osearch_version}}/opensearch-{{osearch_version}}-linux-{{ 'x64' if ansible_architecture == 'x86_64' else 'arm64' if ansible_architecture == 'aarch64' else ansible_architecture }}.tar.gz"
osearch_user: opensearch
osearch_group: opensearch
osearch_home: "/opt/opensearch"
osearch_pid_dir: "/var/run/opensearch"
osearch_log_dir: "/var/log/opensearch"
osearch_data_dir: "/opensearch"
osearch_conf_dir: "{{osearch_home}}/config"
osearch_max_open_files: 65536
osearch_max_map_count: 262144
osearch_extra_config: {
  bootstrap.memory_lock: true,
  action.destructive_requires_name: true,
  thread_pool.search.queue_size: 10000,
  cluster.routing.allocation.awareness.attributes: "zone",
  http.cors.enabled: true,
  http.cors.allow-origin: "*"
}
osearch_network_bind_host: 0.0.0.0
osearch_plugins:
#  - name: "prometheus-exporter"
#    url: "https://github.com/aiven/prometheus-exporter-plugin-for-opensearch/releases/download/{{osearch_version}}.0/prometheus-exporter-{{osearch_version}}.0.zip"

osearch_ssl_path: "{{ osearch_conf_dir }}"
osearch_ssl_ca_path: "{{osearch_ssl_path}}/ca-crt.pem"
osearch_ssl_crt_path: "{{osearch_ssl_path}}/opensearch-crt.pem"
osearch_ssl_key_path: "{{osearch_ssl_path}}/opensearch-key.pem"
osearch_admin_certificate: "{{osearch_ssl_path}}/admin-crt.pem"
osearch_admin_key: "{{osearch_ssl_path}}/admin-key.pem"
osearch_ssl_clientauth_mode: "OPTIONAL"      # Whether we require clients to user certificates to authenticate.  "REQUIRE", "OPTIONAL" or "NONE"

osearch_static_users:
  admin:
    _password: "CHANGEME"
    reserved: true
    backend_roles: ["admin"]
    attributes: { description: "admin user" }

  kibanaserver:
    _password: "CHANGEME"
    reserved: true
    attributes: { description: "kibanaserver user" }

osearch_internal_users:
  dougal:
    password: "CHANGEME"
    opendistro_security_roles: ["all_access"]
    attributes: { "name": "Dougal Seeley" }

osearch_roles:
  ro_global:
    description: Permission to read the global tenant and all the indexes
    cluster_permissions:
      - cluster_composite_ops_ro
    index_permissions:
      - index_patterns: [ '*' ]
        allowed_actions: [ 'read' ]
    tenant_permissions:
      - tenant_patterns: [ 'global_tenant' ]
        allowed_actions: [ 'read' ]

osearch_rolesmapping:
  ro_global:
    backend_roles: [ "NewYorkUsers", "LondonUsers" ]
    hosts: []
    users: []

## This is only needed for non-internal configs (which is enabled by default), but this example shows both internal and saml available for authentication, with LDAP being used to get the backend roles for authorization (Azure SAML does not provide group names from cloud-managed groups, only IDs).
#osearch_security_config:
#  dynamic:
#    http:
#      anonymous_auth_enabled: false
#    authc:
#      basic_internal_auth_domain:
#        order: 0
#        description: "HTTP basic authentication using the internal user database"
#        http_enabled: true
#        transport_enabled: true
#        http_authenticator:
#          type: basic
#          challenge: false
#        authentication_backend:
#          type: internal
#      saml_auth_domain:
#        order: 1
#        description: "Azure SAML provider"
#        http_enabled: true
#        transport_enabled: false
#        http_authenticator:
#          type: saml
#          challenge: true
#          config:
#            idp:
#              metadata_url: "https://login.microsoftonline.com/<Tenant ID>/federationmetadata/2007-06/federationmetadata.xml?appid=<Application_ID>"
#              entity_id: "https://sts.windows.net/<Tenant_ID>/"
#            sp:
#              entity_id: "opensearch-dashboards.example.com"                                    # Not a URL, just a string to identify the SP at the IDP
#            kibana_url: "https://opensearch-dashboards.example.com:5601/"
#            subject_key: ""                                                                     # IMPORTANT - there seems to be a problem if this is omitted, or if it is set to anything if it is not needed.  Default is NameID, which Azure uses, but if you set it to this, you get a 500 error.
#            roles_key: "http://schemas.microsoft.com/ws/2008/06/identity/claims/role"
#            exchange_key: PtnpKLyzpgtjrNkLbHWrCo9dTuyRAos6
#        authentication_backend:
#          type: noop
#    authz:
#      ldap_roles:
#        description: "MS Active Directory LDAP"
#        http_enabled: true
#        transport_enabled: true
#        authorization_backend:
#          type: ldap
#          config:
#            enable_ssl: false
#            enable_start_tls: false
#            enable_ssl_client_auth: false
#            verify_hostnames: true
#            hosts:
#              - ldap1.example.com:389
#            bind_dn: CN=LDAPUser,CN=Users,DC=example,DC=com
#            password: LDAPpassword
#            userbase: OU=Company Staffing,DC=example,DC=com
#            usersearch: (uid={0})
#            username_attribute: cn
#            skip_users:
#              - Administrator
#            rolebase: OU=Groups,DC=example,DC=com
#            rolesearch: (member={0})
#            userroleattribute: null
#            userrolename: disabled
#            rolename: cn
#            resolve_nested_roles: true


osearch_index_templates:
  - name: tst_dynamic
    content: {
      "index_patterns": ["tst_dynamic"],
      "priority": 0,
      "template": {
        "settings": {
          "index.codec": "best_compression",
          "index.number_of_shards": "{{ groups['data'] | length }}",
          "index.number_of_replicas": 1,
          "index.mapping.ignore_malformed": true,
          "index.mapping.coerce": true,
          "index.mapping.total_fields.limit": 1500,
        },
        "mappings": {
          "_source": { "enabled": true },
          "dynamic": true
        }
      }
    }
  - name: tst_noindex
    content: {
      "index_patterns": ["tst_noindex"],
      "priority": 0,
      "template": {
        "settings": {
          "codec": "best_compression",
          "number_of_shards": "{{ groups['data'] | length }}",
          "number_of_replicas": 1,
          "refresh_interval": "5s",
        },
        "mappings": {
          "_source": { "enabled": false },
          "dynamic": false,
        }
      }
    }

########################
###### Dashboards ######
########################
dashboards_version: "2.0.1"     #"1.3.3"
dashboards_artifact_location: "https://artifacts.opensearch.org/releases/bundle/opensearch-dashboards/{{dashboards_version}}/opensearch-dashboards-{{dashboards_version}}-linux-{{ 'x64' if ansible_architecture == 'x86_64' else 'arm64' if ansible_architecture == 'aarch64' else ansible_architecture }}.tar.gz"
dashboards_user: "{{osearch_user}}"
dashboards_group: "{{osearch_group}}"
dashboards_home: "/opt/opensearch-dashboards"
dashboards_pid_dir: "/var/run/opensearch-dashboards"
dashboards_log_dir: "/var/log/opensearch-dashboards"
dashboards_conf_dir: "{{dashboards_home}}/config"
dashboards_network_host: 0.0.0.0
dashboards_port: 5601    # 5601 is default
dashboards_multitenancy_enabled: true

dashboards_ssl_path: "{{ dashboards_conf_dir }}/certs"
dashboards_ssl_is_self_signed: true
dashboards_ssl_ca_path: "{{dashboards_ssl_path}}/ca-crt.pem"
dashboards_ssl_crt_path: "{{dashboards_ssl_path}}/opensearch-dashboards-crt.pem"
dashboards_ssl_key_path: "{{dashboards_ssl_path}}/opensearch-dashboards-key.pem"

#If not using self-signed certificates (should vault-encrypt the key)
dashboards_ssl_crt_content: ""
dashboards_ssl_key_content: ""
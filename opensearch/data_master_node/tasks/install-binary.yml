---

- block:
    ##This is no good - if it's already running, this starts up another instance to get the version, which may OOM.
    #- name: opensearch/install-binary | Check if opensearch is installed
    #  shell: "{{osearch_home}}/bin/opensearch --version | grep \"Version: {{osearch_version}}\""
    #  failed_when: osearch_install_check.rc > 1
    #  changed_when: no
    #  register: osearch_install_check

    - name: opensearch/install-binary | Check opensearch installed version
      stat: path="{{osearch_unzip_loc}}"
      register: this_osearch_installed

    #- debug: msg={{this_osearch_installed.stat}}

    - name: opensearch/install-binary | Check any opensearch installed
      stat: path="{{osearch_home}}"
      register: osearch_link_stat

    #- debug: msg={{osearch_link_stat.stat}}

#    - name: opensearch/install-binary | "Assert that installed version is same as requested version (we cannot perform safe (zero-downtime) upgrades by just running with a new version number)"
#      assert: { that: "osearch_link_stat.stat.lnk_source == osearch_unzip_loc", fail_msg: "We cannot perform zero-downtime upgrades by just running with a new es_version number.  Please use redeploy.yml" }
    - warn_str: msg="We cannot perform zero-downtime upgrades by just running with a new es_version number.  Please use redeploy.yml"
      when: osearch_link_stat.stat.exists is defined and osearch_link_stat.stat.exists|bool  and  osearch_link_stat.stat.lnk_source != osearch_unzip_loc

    - block:
        - name: opensearch/install-binary | Get opensearch artifact
          become: yes
          get_url:
            url: "{{osearch_artifact_location}}"
            dest: "/opt/{{osearch_artifact_location | basename}}"
          when: use_local_artifact is not defined  or  use_local_artifact|bool==false

        - name: opensearch/install-binary | Extract the opensearch artifact
          become: yes
          unarchive:
            remote_src: "{{ 'yes' if (use_local_artifact is not defined  or  use_local_artifact|bool==false) else 'no' }}"
            src: "{{ '/opt/' if (use_local_artifact is not defined  or  use_local_artifact|bool==false) else '' }}{{osearch_artifact_location | basename}}"
            dest: /opt
            creates: "{{osearch_unzip_loc}}"
          notify: restart opensearch

        # 'owner' and 'group' directives in unarchive do not work for tar.gz files
        - name: opensearch/install-binary | Change ownership of the opensearch dir
          become: yes
          file:
            state: directory
            recurse: true
            path: "{{osearch_unzip_loc}}"
            owner: "{{osearch_user}}"
            group: "{{osearch_group}}"
          notify: restart opensearch

        - name: opensearch/install-binary | Create the opensearch link
          become: yes
          file:
            src: "{{osearch_unzip_loc}}"
            dest: "{{osearch_home}}"
            state: link
            mode: 0755
            owner: "{{osearch_user}}"
            group: "{{osearch_group}}"
          notify: restart opensearch
      when: (not osearch_link_stat.stat.exists) or (osearch_link_stat.stat.exists and osearch_link_stat.stat.lnk_source == osearch_unzip_loc)
  vars:
    osearch_unzip_loc: "/opt/opensearch-{{osearch_version}}"
